G= g.Weighted_Graph("Text.txt")
G.draw_graph()

E = G.edge_set()           
V = G.vertex_set()          

def cost(e):                   
    return G.edge_dict()[e]


VT = {0}
ET = []
#tuple for Vertex and Edges
T (VT, ET)

#creates all the edges and removes any duplicates
def incident_edges(T):
#creates all the edges    
    temp_edges = []
    for e in E:
        for v in T[0]:
            if v in e and e not in T[1]:
                temp_edges.append(e)
                
#segregates valid edges and invalid edges                
   incident_edges = []
   for e in temp_edges:
        if e[0] not in T[0] or e[1] not in T[0]:
            incident_edges.append(e)
   return incident_edges     

def valid_incident_edges(T):
    valid = incident_edges(T) 
    min_edge = valid[0] 
    for i in range(len(valid)):
        if cost(valid[i]) < cost(min_edge):
            min_edge = valid[i]

    temp_edges = []
    temp_edges.append(min_edge)
    for e in T[1]:
        temp_edges.append(e)

    temp_vertices = {min_edge[0], min_edge[1]}

    return (temp_vertices.union(T[0]), temp_edges)

def Prims(T):  
    x=0
    while T[0] != V: 
        x+=1
        T = valid_incident_edges(T)
        print ("iteration "+str(x))
        print (T)
        print (" ")
    cost_total = 0
    for e in T[1]:
        cost_total += cost(e)
    return(T, 'Total cost:' ,cost_total)
    
print("All the vertices used, vertex sets used for the Prims algorithm in the graph:", Prims(T))    
    
